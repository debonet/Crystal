You can set variables like this:
~x = 4

and you can use them like this {{x}} or like this {{x+5}}


Structures work too: 
~a = {"a" : "javascript", "c": "python"}

and you can access them just like in {{a["c"]}}.

As do comments.
~#like this one which you'll never see


You can interjet and
~# any amount of complext stuff
~y = 7
~#so long as you preceed the next line with a ~^
~^
 you wont break lines. Just be careful about adding spaces as needed.


Functions can be defined using text inside.
~#as in this example
~def myfunc(u):
~    x = 3
   I like my local value of {{x}} as much as the input {{u}}
~/def
~^
 And then just call them:
~myfunc(7)

as many times as you like:
~myfunc(9)

scopes and closures are honored. If we set x to 5
~^
~x = 5
 then x = {{x}}, and yet our function which uses x:
~myfunc("happy")
still leaves x = {{x}}

~def myfunc2():
~    global a
Using global we can reach outside to see that a == {{a}}
and we can change its value
~    a["d"] = "C++"
~/def
~myfunc2()
so now a is {{a}}


Functions that return strings 
~#like this:
~def bar(x):
~    return f"in the {x} middle of"
~/def
~^ 
can be called {{bar("very")}} lines


Loops work too:
~for n in range(1,3):
         * item {{n}}
~/for

Loops of functions? Why not!
~def myfunc2(m):
         * item {{m+10}}
~/def
~for n in range(1,3):
~    myfunc2(n)         
~/for


Loops in functions. Yup. Got that too:
~def myfunc3():
~    for n in range(1,3):
         * item {{n+100}}
~/def
~myfunc3()



Single line loops work too:
~for n in range(1,5):
~^
  * item {{n}}
~/for


You may have noticed the use of "code enders" in the examples above.
Because your output text is likely not going to be indented
according to python

they're needed to  differentiate between cases like this:

~for n in range(1,3):
repeat this 3 times
and repeat this too

~for n in range(1,3):
repeat this 3 times
~/for
but dont repeat this


Notice that the first ~for was not closed. It could be written as:
~for n in range(1,3):
repeat this 3 times
and repeat this too
~/for


By default code enders are any line that begins with . or / 

Generally you might write:

~def foo():
~    for n in range(1,3):
This line is in the loop.
And so is this one.
~    /for
This line is not, but is still in the function
~.def
This line is outside the function
~foo()


Though you might prefer something else, e.g. empy enders, or
some other ending word (e.g. 'endif','enddef', 'endfor', etc)
~def foo():
~    for n in range(1,3):
This line is in the loop.
And so is this one.
~    /
This line is not, but is still in the function.
~.enddef
This line is outside the function
~foo()


if something gets complicated you can annotate it
~= annotate True
~for n in range(1,3):
this line
~    for n2 in range(4,6):
this line
~    /for
~/for
~= annotate False


you can also change the indicators to personalize things,
either as a configuration parameter to the evaluate function
or direclty within the template

~= code ^---> (.*)$
~= ender ^--->(.*)<
~= nobreak ^[ \t]*<nobreak>[ \t]*$
~= open \$\(
~= close \)

---> kind = "different"
now its like a
<nobreak>
 totally $(kind) language!

or go wild and invent your own crazy syntax

~= indicator ^!!(.*)!!$
~= ender ^!!( *)@.*!!$
~= nobreak ^!!\+\+KEEP\+\+!!$
~= reassign ^:set(.*)$
:set open (<<)
:set close (>>)

!!kind = "different"!!
now its like a
!!++KEEP++!!
totally <<kind>> language!



~#and you can even have emacs highlight the meta lines
~#Hi-lock: (("^~.*$" (0 (quote hi-blue) append)))
~#Hi-lock: (("{{[^}]*}}" (0 (quote hi-blue) append)))
